.Lambda #Lambda1<System.Action`2[System.Object,Bond.Protocols.SimpleBinaryWriter`1[Bond.IO.Unsafe.OutputStream]]>(
    System.Object $obj,
    Bond.Protocols.SimpleBinaryWriter`1[Bond.IO.Unsafe.OutputStream] $writer) {
    .Block(ExpressionsTest.Example $Example_obj) {
        $Example_obj = (ExpressionsTest.Example)$obj;
        .Call $writer.WriteStructBegin(.Constant<Bond.Metadata>(Example));
        .Block(ExpressionsTest.Base $Base_obj) {
            $Base_obj = (ExpressionsTest.Base)$obj;
            .Call $writer.WriteBaseBegin(.Constant<Bond.Metadata>(Base));
            .If (($Base_obj.vvb).Count != 0) {
                .Block() {
                    .Call $writer.WriteFieldBegin(
                        .Constant<Bond.BondDataType>(BT_LIST),
                        .Constant<System.UInt16>(0),
                        .Constant<Bond.Metadata>(vvb));
                    .Block(
                        System.Int32 $index,
                        System.Int32 $count) {
                        $index = -1;
                        $count = ($Base_obj.vvb).Count;
                        .Block() {
                            .Call $writer.WriteContainerBegin(
                                $count,
                                .Constant<Bond.BondDataType>(BT_LIST));
                            .Loop  {
                                .If (++$index < $count) {
                                    .Block() {
                                        .Default(System.Void);
                                        .Block(
                                            System.Int32 $index,
                                            System.Int32 $count) {
                                            $index = -1;
                                            $count = (($Base_obj.vvb).Item[$index]).Count;
                                            .Block() {
                                                .Call $writer.WriteContainerBegin(
                                                    $count,
                                                    .Constant<Bond.BondDataType>(BT_UINT64));
                                                .Loop  {
                                                    .If (++$index < $count) {
                                                        .Block() {
                                                            .Default(System.Void);
                                                            .Call $writer.WriteUInt64((($Base_obj.vvb).Item[$index]).Item[$index]);
                                                            .Default(System.Void)
                                                        }
                                                    } .Else {
                                                        .Break end { }
                                                    }
                                                }
                                                .LabelTarget end:;
                                                .Call $writer.WriteContainerEnd()
                                            }
                                        };
                                        .Default(System.Void)
                                    }
                                } .Else {
                                    .Break end { }
                                }
                            }
                            .LabelTarget end:;
                            .Call $writer.WriteContainerEnd()
                        }
                    };
                    .Call $writer.WriteFieldEnd()
                }
            } .Else {
                .Call $writer.WriteFieldOmitted(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(0),
                    .Constant<Bond.Metadata>(vvb))
            };
            .Call $writer.WriteBaseEnd()
        };
        .If ($Example_obj._bool != False) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_BOOL),
                    .Constant<System.UInt16>(0),
                    .Constant<Bond.Metadata>(_bool));
                .Call $writer.WriteBool($Example_obj._bool);
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_BOOL),
                .Constant<System.UInt16>(0),
                .Constant<Bond.Metadata>(_bool))
        };
        .If ($Example_obj._str != "") {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_STRING),
                    .Constant<System.UInt16>(2),
                    .Constant<Bond.Metadata>(_str));
                .Call $writer.WriteString($Example_obj._str);
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_STRING),
                .Constant<System.UInt16>(2),
                .Constant<Bond.Metadata>(_str))
        };
        .If ($Example_obj._uint32 != 0U) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_UINT32),
                    .Constant<System.UInt16>(12),
                    .Constant<Bond.Metadata>(_uint32));
                .Call $writer.WriteUInt32($Example_obj._uint32);
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_UINT32),
                .Constant<System.UInt16>(12),
                .Constant<Bond.Metadata>(_uint32))
        };
        .If ($Example_obj._int8 != .Constant<System.SByte>(0)) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_INT8),
                    .Constant<System.UInt16>(14),
                    .Constant<Bond.Metadata>(_int8));
                .Call $writer.WriteInt8($Example_obj._int8);
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_INT8),
                .Constant<System.UInt16>(14),
                .Constant<Bond.Metadata>(_int8))
        };
        .Block() {
            .Call $writer.WriteFieldBegin(
                .Constant<Bond.BondDataType>(BT_INT64),
                .Constant<System.UInt16>(17),
                .Constant<Bond.Metadata>(_int64));
            .Call $writer.WriteInt64($Example_obj._int64);
            .Call $writer.WriteFieldEnd()
        };
        .If ($Example_obj._double != 0D) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_DOUBLE),
                    .Constant<System.UInt16>(18),
                    .Constant<Bond.Metadata>(_double));
                .Call $writer.WriteDouble($Example_obj._double);
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_DOUBLE),
                .Constant<System.UInt16>(18),
                .Constant<Bond.Metadata>(_double))
        };
        .Block() {
            .Call $writer.WriteFieldBegin(
                .Constant<Bond.BondDataType>(BT_STRUCT),
                .Constant<System.UInt16>(20),
                .Constant<Bond.Metadata>(guid));
            .Block(System.Object $obj) {
                $obj = (System.Object)$Example_obj.guid;
                .Block(Bond.GUID $GUID_obj) {
                    $GUID_obj = (Bond.GUID)$obj;
                    .Call $writer.WriteStructBegin(.Constant<Bond.Metadata>(GUID));
                    .If ($GUID_obj.Data1 != 0U) {
                        .Block() {
                            .Call $writer.WriteFieldBegin(
                                .Constant<Bond.BondDataType>(BT_UINT32),
                                .Constant<System.UInt16>(0),
                                .Constant<Bond.Metadata>(Data1));
                            .Call $writer.WriteUInt32($GUID_obj.Data1);
                            .Call $writer.WriteFieldEnd()
                        }
                    } .Else {
                        .Call $writer.WriteFieldOmitted(
                            .Constant<Bond.BondDataType>(BT_UINT32),
                            .Constant<System.UInt16>(0),
                            .Constant<Bond.Metadata>(Data1))
                    };
                    .If ($GUID_obj.Data2 != .Constant<System.UInt16>(0)) {
                        .Block() {
                            .Call $writer.WriteFieldBegin(
                                .Constant<Bond.BondDataType>(BT_UINT16),
                                .Constant<System.UInt16>(1),
                                .Constant<Bond.Metadata>(Data2));
                            .Call $writer.WriteUInt16($GUID_obj.Data2);
                            .Call $writer.WriteFieldEnd()
                        }
                    } .Else {
                        .Call $writer.WriteFieldOmitted(
                            .Constant<Bond.BondDataType>(BT_UINT16),
                            .Constant<System.UInt16>(1),
                            .Constant<Bond.Metadata>(Data2))
                    };
                    .If ($GUID_obj.Data3 != .Constant<System.UInt16>(0)) {
                        .Block() {
                            .Call $writer.WriteFieldBegin(
                                .Constant<Bond.BondDataType>(BT_UINT16),
                                .Constant<System.UInt16>(2),
                                .Constant<Bond.Metadata>(Data3));
                            .Call $writer.WriteUInt16($GUID_obj.Data3);
                            .Call $writer.WriteFieldEnd()
                        }
                    } .Else {
                        .Call $writer.WriteFieldOmitted(
                            .Constant<Bond.BondDataType>(BT_UINT16),
                            .Constant<System.UInt16>(2),
                            .Constant<Bond.Metadata>(Data3))
                    };
                    .If ($GUID_obj.Data4 != 0UL) {
                        .Block() {
                            .Call $writer.WriteFieldBegin(
                                .Constant<Bond.BondDataType>(BT_UINT64),
                                .Constant<System.UInt16>(3),
                                .Constant<Bond.Metadata>(Data4));
                            .Call $writer.WriteUInt64($GUID_obj.Data4);
                            .Call $writer.WriteFieldEnd()
                        }
                    } .Else {
                        .Call $writer.WriteFieldOmitted(
                            .Constant<Bond.BondDataType>(BT_UINT64),
                            .Constant<System.UInt16>(3),
                            .Constant<Bond.Metadata>(Data4))
                    };
                    .Call $writer.WriteStructEnd()
                }
            };
            .Call $writer.WriteFieldEnd()
        };
        .If (($Example_obj._int32Vector).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(30),
                    .Constant<Bond.Metadata>(_int32Vector));
                .Block(
                    System.Int32 $index,
                    System.Int32 $count) {
                    $index = -1;
                    $count = ($Example_obj._int32Vector).Count;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_INT32));
                        .Loop  {
                            .If (++$index < $count) {
                                .Block() {
                                    .Default(System.Void);
                                    .Call $writer.WriteInt32(($Example_obj._int32Vector).Item[$index]);
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(30),
                .Constant<Bond.Metadata>(_int32Vector))
        };
        .If (($Example_obj._nestedVector).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(40),
                    .Constant<Bond.Metadata>(_nestedVector));
                .Block(System.Collections.Generic.LinkedListNode`1[ExpressionsTest.Nested] $node) {
                    $node = null;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._nestedVector).Count,
                            .Constant<Bond.BondDataType>(BT_STRUCT));
                        .Loop  {
                            .If (.If ($node == null) {
                                $node = ($Example_obj._nestedVector).First
                            } .Else {
                                $node = $node.Next
                            } != null) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(System.Object $obj) {
                                        $obj = (System.Object)$node.Value;
                                        .Block(ExpressionsTest.Nested $Nested_obj) {
                                            $Nested_obj = (ExpressionsTest.Nested)$obj;
                                            .Call $writer.WriteStructBegin(.Constant<Bond.Metadata>(Nested));
                                            .If ($Nested_obj._double != 0D) {
                                                .Block() {
                                                    .Call $writer.WriteFieldBegin(
                                                        .Constant<Bond.BondDataType>(BT_DOUBLE),
                                                        .Constant<System.UInt16>(0),
                                                        .Constant<Bond.Metadata>(_double));
                                                    .Call $writer.WriteDouble($Nested_obj._double);
                                                    .Call $writer.WriteFieldEnd()
                                                }
                                            } .Else {
                                                .Call $writer.WriteFieldOmitted(
                                                    .Constant<Bond.BondDataType>(BT_DOUBLE),
                                                    .Constant<System.UInt16>(0),
                                                    .Constant<Bond.Metadata>(_double))
                                            };
                                            .Call $writer.WriteStructEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(40),
                .Constant<Bond.Metadata>(_nestedVector))
        };
        .Block(System.ArraySegment`1[System.Byte] $convertedBlob) {
            $convertedBlob = $Example_obj.b;
            .If ($convertedBlob != .Default(System.ArraySegment`1[System.Byte])) {
                .Block() {
                    .Call $writer.WriteFieldBegin(
                        .Constant<Bond.BondDataType>(BT_LIST),
                        .Constant<System.UInt16>(50),
                        .Constant<Bond.Metadata>(b));
                    .Block(
                        System.ArraySegment`1[System.Byte] $arraySegment,
                        System.Int32 $count,
                        System.Int32 $index,
                        System.Int32 $end) {
                        $arraySegment = $Example_obj.b;
                        $index = $arraySegment.Offset;
                        $count = $arraySegment.Count;
                        $end = $index + $count;
                        .Block() {
                            .Call $writer.WriteContainerBegin(
                                $count,
                                .Constant<Bond.BondDataType>(BT_INT8));
                            .Call $writer.WriteBytes($arraySegment);
                            .Call $writer.WriteContainerEnd()
                        }
                    };
                    .Call $writer.WriteFieldEnd()
                }
            } .Else {
                .Call $writer.WriteFieldOmitted(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(50),
                    .Constant<Bond.Metadata>(b))
            }
        };
        .If (($Example_obj._blobList).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(51),
                    .Constant<Bond.Metadata>(_blobList));
                .Block(System.Collections.Generic.LinkedListNode`1[System.ArraySegment`1[System.Byte]] $node) {
                    $node = null;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._blobList).Count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (.If ($node == null) {
                                $node = ($Example_obj._blobList).First
                            } .Else {
                                $node = $node.Next
                            } != null) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = $node.Value;
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(51),
                .Constant<Bond.Metadata>(_blobList))
        };
        .If (($Example_obj._blobVector).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(52),
                    .Constant<Bond.Metadata>(_blobVector));
                .Block(
                    System.Int32 $index,
                    System.Int32 $count) {
                    $index = -1;
                    $count = ($Example_obj._blobVector).Count;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (++$index < $count) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = ($Example_obj._blobVector).Item[$index];
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(52),
                .Constant<Bond.Metadata>(_blobVector))
        };
        .If (($Example_obj._blobMap).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_MAP),
                    .Constant<System.UInt16>(53),
                    .Constant<Bond.Metadata>(_blobMap));
                .Block(System.Collections.Generic.IEnumerator`1[System.Collections.Generic.KeyValuePair`2[System.Int32,System.ArraySegment`1[System.Byte]]] $enumerator)
                 {
                    $enumerator = .Call ($Example_obj._blobMap).GetEnumerator();
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._blobMap).Count,
                            .Constant<Bond.BondDataType>(BT_INT32),
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (
                                .Call $enumerator.MoveNext()
                            ) {
                                .Block() {
                                    .Default(System.Void);
                                    .Call $writer.WriteInt32(($enumerator.Current).Key);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = ($enumerator.Current).Value;
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_MAP),
                .Constant<System.UInt16>(53),
                .Constant<Bond.Metadata>(_blobMap))
        };
        .If ($Example_obj._blobNullable != .Constant<System.ArraySegment`1[System.Byte]>(System.ArraySegment`1[System.Byte])) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(54),
                    .Constant<Bond.Metadata>(_blobNullable));
                .Block(
                    System.ArraySegment`1[System.Byte] $convertedBlob,
                    System.Int32 $count) {
                    $convertedBlob = $Example_obj._blobNullable;
                    $count = .If ($convertedBlob.Array != null) {
                        1
                    } .Else {
                        0
                    };
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If ($count-- != 0) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = $convertedBlob;
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(54),
                .Constant<Bond.Metadata>(_blobNullable))
        };
        .If (($Example_obj._map).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_MAP),
                    .Constant<System.UInt16>(60),
                    .Constant<Bond.Metadata>(_map));
                .Block(System.Collections.Generic.IEnumerator`1[System.Collections.Generic.KeyValuePair`2[System.Int32,System.Double]] $enumerator)
                 {
                    $enumerator = .Call ($Example_obj._map).GetEnumerator();
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._map).Count,
                            .Constant<Bond.BondDataType>(BT_INT32),
                            .Constant<Bond.BondDataType>(BT_DOUBLE));
                        .Loop  {
                            .If (
                                .Call $enumerator.MoveNext()
                            ) {
                                .Block() {
                                    .Default(System.Void);
                                    .Call $writer.WriteInt32(($enumerator.Current).Key);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Call $writer.WriteDouble(($enumerator.Current).Value);
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_MAP),
                .Constant<System.UInt16>(60),
                .Constant<Bond.Metadata>(_map))
        };
        .Block(System.ArraySegment`1[System.Byte] $convertedBlob) {
            $convertedBlob = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                $Example_obj._decimal,
                .Default(System.ArraySegment`1[System.Byte]));
            .If ($convertedBlob != .Default(System.ArraySegment`1[System.Byte])) {
                .Block() {
                    .Call $writer.WriteFieldBegin(
                        .Constant<Bond.BondDataType>(BT_LIST),
                        .Constant<System.UInt16>(70),
                        .Constant<Bond.Metadata>(_decimal));
                    .Block(
                        System.ArraySegment`1[System.Byte] $arraySegment,
                        System.Int32 $count,
                        System.Int32 $index,
                        System.Int32 $end) {
                        $arraySegment = $convertedBlob;
                        $index = $arraySegment.Offset;
                        $count = $arraySegment.Count;
                        $end = $index + $count;
                        .Block() {
                            .Call $writer.WriteContainerBegin(
                                $count,
                                .Constant<Bond.BondDataType>(BT_INT8));
                            .Call $writer.WriteBytes($arraySegment);
                            .Call $writer.WriteContainerEnd()
                        }
                    };
                    .Call $writer.WriteFieldEnd()
                }
            } .Else {
                .Call $writer.WriteFieldOmitted(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(70),
                    .Constant<Bond.Metadata>(_decimal))
            }
        };
        .If (($Example_obj._decList).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(71),
                    .Constant<Bond.Metadata>(_decList));
                .Block(System.Collections.Generic.LinkedListNode`1[System.Decimal] $node) {
                    $node = null;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._decList).Count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (.If ($node == null) {
                                $node = ($Example_obj._decList).First
                            } .Else {
                                $node = $node.Next
                            } != null) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                            $node.Value,
                                            .Default(System.ArraySegment`1[System.Byte]));
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(71),
                .Constant<Bond.Metadata>(_decList))
        };
        .If (($Example_obj._decVector).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(72),
                    .Constant<Bond.Metadata>(_decVector));
                .Block(
                    System.Int32 $index,
                    System.Int32 $count) {
                    $index = -1;
                    $count = ($Example_obj._decVector).Count;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (++$index < $count) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                            ($Example_obj._decVector).Item[$index],
                                            .Default(System.ArraySegment`1[System.Byte]));
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(72),
                .Constant<Bond.Metadata>(_decVector))
        };
        .If (($Example_obj._decMap).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_MAP),
                    .Constant<System.UInt16>(73),
                    .Constant<Bond.Metadata>(_decMap));
                .Block(System.Collections.Generic.IEnumerator`1[System.Collections.Generic.KeyValuePair`2[System.Int32,System.Decimal]] $enumerator)
                 {
                    $enumerator = .Call ($Example_obj._decMap).GetEnumerator();
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._decMap).Count,
                            .Constant<Bond.BondDataType>(BT_INT32),
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (
                                .Call $enumerator.MoveNext()
                            ) {
                                .Block() {
                                    .Default(System.Void);
                                    .Call $writer.WriteInt32(($enumerator.Current).Key);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                            ($enumerator.Current).Value,
                                            .Default(System.ArraySegment`1[System.Byte]));
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_MAP),
                .Constant<System.UInt16>(73),
                .Constant<Bond.Metadata>(_decMap))
        };
        .If ($Example_obj._decNullable != 0M) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(74),
                    .Constant<Bond.Metadata>(_decNullable));
                .Block(
                    System.ArraySegment`1[System.Byte] $convertedBlob,
                    System.Int32 $count) {
                    $convertedBlob = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                        $Example_obj._decNullable,
                        .Default(System.ArraySegment`1[System.Byte]));
                    $count = .If ($convertedBlob.Array != null) {
                        1
                    } .Else {
                        0
                    };
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If ($count-- != 0) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = $convertedBlob;
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(74),
                .Constant<Bond.Metadata>(_decNullable))
        };
        .Block(System.ArraySegment`1[System.Byte] $convertedBlob) {
            $convertedBlob = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                $Example_obj._decimal_req,
                .Default(System.ArraySegment`1[System.Byte]));
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(75),
                    .Constant<Bond.Metadata>(_decimal_req));
                .Block(
                    System.ArraySegment`1[System.Byte] $arraySegment,
                    System.Int32 $count,
                    System.Int32 $index,
                    System.Int32 $end) {
                    $arraySegment = $convertedBlob;
                    $index = $arraySegment.Offset;
                    $count = $arraySegment.Count;
                    $end = $index + $count;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_INT8));
                        .Call $writer.WriteBytes($arraySegment);
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        };
        .Block(System.ArraySegment`1[System.Byte] $convertedBlob) {
            $convertedBlob = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                $Example_obj._reference,
                .Default(System.ArraySegment`1[System.Byte]));
            .If ($convertedBlob != .Default(System.ArraySegment`1[System.Byte])) {
                .Block() {
                    .Call $writer.WriteFieldBegin(
                        .Constant<Bond.BondDataType>(BT_LIST),
                        .Constant<System.UInt16>(80),
                        .Constant<Bond.Metadata>(_reference));
                    .Block(
                        System.ArraySegment`1[System.Byte] $arraySegment,
                        System.Int32 $count,
                        System.Int32 $index,
                        System.Int32 $end) {
                        $arraySegment = $convertedBlob;
                        $index = $arraySegment.Offset;
                        $count = $arraySegment.Count;
                        $end = $index + $count;
                        .Block() {
                            .Call $writer.WriteContainerBegin(
                                $count,
                                .Constant<Bond.BondDataType>(BT_INT8));
                            .Call $writer.WriteBytes($arraySegment);
                            .Call $writer.WriteContainerEnd()
                        }
                    };
                    .Call $writer.WriteFieldEnd()
                }
            } .Else {
                .Call $writer.WriteFieldOmitted(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(80),
                    .Constant<Bond.Metadata>(_reference))
            }
        };
        .If (($Example_obj._refList).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(81),
                    .Constant<Bond.Metadata>(_refList));
                .Block(System.Collections.Generic.LinkedListNode`1[ExpressionsTest.RefObject] $node) {
                    $node = null;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._refList).Count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (.If ($node == null) {
                                $node = ($Example_obj._refList).First
                            } .Else {
                                $node = $node.Next
                            } != null) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                            $node.Value,
                                            .Default(System.ArraySegment`1[System.Byte]));
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(81),
                .Constant<Bond.Metadata>(_refList))
        };
        .If (($Example_obj._refVector).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(82),
                    .Constant<Bond.Metadata>(_refVector));
                .Block(
                    System.Int32 $index,
                    System.Int32 $count) {
                    $index = -1;
                    $count = ($Example_obj._refVector).Count;
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (++$index < $count) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                            ($Example_obj._refVector).Item[$index],
                                            .Default(System.ArraySegment`1[System.Byte]));
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(82),
                .Constant<Bond.Metadata>(_refVector))
        };
        .If (($Example_obj._refMap).Count != 0) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_MAP),
                    .Constant<System.UInt16>(83),
                    .Constant<Bond.Metadata>(_refMap));
                .Block(System.Collections.Generic.IEnumerator`1[System.Collections.Generic.KeyValuePair`2[System.Int32,ExpressionsTest.RefObject]] $enumerator)
                 {
                    $enumerator = .Call ($Example_obj._refMap).GetEnumerator();
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            ($Example_obj._refMap).Count,
                            .Constant<Bond.BondDataType>(BT_INT32),
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If (
                                .Call $enumerator.MoveNext()
                            ) {
                                .Block() {
                                    .Default(System.Void);
                                    .Call $writer.WriteInt32(($enumerator.Current).Key);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                            ($enumerator.Current).Value,
                                            .Default(System.ArraySegment`1[System.Byte]));
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_MAP),
                .Constant<System.UInt16>(83),
                .Constant<Bond.Metadata>(_refMap))
        };
        .If ($Example_obj._refNullable != null) {
            .Block() {
                .Call $writer.WriteFieldBegin(
                    .Constant<Bond.BondDataType>(BT_LIST),
                    .Constant<System.UInt16>(84),
                    .Constant<Bond.Metadata>(_refNullable));
                .Block(
                    System.ArraySegment`1[System.Byte] $convertedBlob,
                    System.Int32 $count) {
                    $convertedBlob = .Call ExpressionsTest.BondTypeAliasConverter.Convert(
                        $Example_obj._refNullable,
                        .Default(System.ArraySegment`1[System.Byte]));
                    $count = .If ($convertedBlob.Array != null) {
                        1
                    } .Else {
                        0
                    };
                    .Block() {
                        .Call $writer.WriteContainerBegin(
                            $count,
                            .Constant<Bond.BondDataType>(BT_LIST));
                        .Loop  {
                            .If ($count-- != 0) {
                                .Block() {
                                    .Default(System.Void);
                                    .Block(
                                        System.ArraySegment`1[System.Byte] $arraySegment,
                                        System.Int32 $count,
                                        System.Int32 $index,
                                        System.Int32 $end) {
                                        $arraySegment = $convertedBlob;
                                        $index = $arraySegment.Offset;
                                        $count = $arraySegment.Count;
                                        $end = $index + $count;
                                        .Block() {
                                            .Call $writer.WriteContainerBegin(
                                                $count,
                                                .Constant<Bond.BondDataType>(BT_INT8));
                                            .Call $writer.WriteBytes($arraySegment);
                                            .Call $writer.WriteContainerEnd()
                                        }
                                    };
                                    .Default(System.Void)
                                }
                            } .Else {
                                .Break end { }
                            }
                        }
                        .LabelTarget end:;
                        .Call $writer.WriteContainerEnd()
                    }
                };
                .Call $writer.WriteFieldEnd()
            }
        } .Else {
            .Call $writer.WriteFieldOmitted(
                .Constant<Bond.BondDataType>(BT_LIST),
                .Constant<System.UInt16>(84),
                .Constant<Bond.Metadata>(_refNullable))
        };
        .Block() {
            .Call $writer.WriteFieldBegin(
                .Constant<Bond.BondDataType>(BT_STRUCT),
                .Constant<System.UInt16>(85),
                .Constant<Bond.Metadata>(_dt));
            .Block(System.Object $obj) {
                $obj = (System.Object)$Example_obj._dt;
                .Block(ExpressionsTest.Generic`1[System.DateTime] $Generic`1_obj) {
                    $Generic`1_obj = (ExpressionsTest.Generic`1[System.DateTime])$obj;
                    .Call $writer.WriteStructBegin(.Constant<Bond.Metadata>(Generic<int64>));
                    .If ($Generic`1_obj.value != .Default(System.DateTime)) {
                        .Block() {
                            .Call $writer.WriteFieldBegin(
                                .Constant<Bond.BondDataType>(BT_INT64),
                                .Constant<System.UInt16>(0),
                                .Constant<Bond.Metadata>(value));
                            .Call $writer.WriteInt64(.Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                    $Generic`1_obj.value,
                                    .Default(System.Int64)));
                            .Call $writer.WriteFieldEnd()
                        }
                    } .Else {
                        .Call $writer.WriteFieldOmitted(
                            .Constant<Bond.BondDataType>(BT_INT64),
                            .Constant<System.UInt16>(0),
                            .Constant<Bond.Metadata>(value))
                    };
                    .Call $writer.WriteStructEnd()
                }
            };
            .Call $writer.WriteFieldEnd()
        };
        .Block() {
            .Call $writer.WriteFieldBegin(
                .Constant<Bond.BondDataType>(BT_STRUCT),
                .Constant<System.UInt16>(86),
                .Constant<Bond.Metadata>(_dt2));
            .Block(System.Object $obj) {
                $obj = (System.Object)$Example_obj._dt2;
                .Block(ExpressionsTest.GenericNothing`1[System.DateTime] $GenericNothing`1_obj) {
                    $GenericNothing`1_obj = (ExpressionsTest.GenericNothing`1[System.DateTime])$obj;
                    .Call $writer.WriteStructBegin(.Constant<Bond.Metadata>(GenericNothing<int64>));
                    .If ($GenericNothing`1_obj.value != null) {
                        .Block() {
                            .Call $writer.WriteFieldBegin(
                                .Constant<Bond.BondDataType>(BT_INT64),
                                .Constant<System.UInt16>(0),
                                .Constant<Bond.Metadata>(value));
                            .Call $writer.WriteInt64(.Call ExpressionsTest.BondTypeAliasConverter.Convert(
                                    (System.DateTime)$GenericNothing`1_obj.value,
                                    .Default(System.Int64)));
                            .Call $writer.WriteFieldEnd()
                        }
                    } .Else {
                        .Call $writer.WriteFieldOmitted(
                            .Constant<Bond.BondDataType>(BT_INT64),
                            .Constant<System.UInt16>(0),
                            .Constant<Bond.Metadata>(value))
                    };
                    .Call $writer.WriteStructEnd()
                }
            };
            .Call $writer.WriteFieldEnd()
        };
        .Call $writer.WriteStructEnd()
    }
}